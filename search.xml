<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>图像识别分类 代码</title>
    <url>/2021/04/15/Machine-Learning-Share/</url>
    <content><![CDATA[<p>打算做一套图像识别都适用的代码，放在博客方便copy</p>
<span id="more"></span>

<h3 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> sklearn</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tensorflow <span class="keyword">import</span> keras</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(tf.__version__)</span><br><span class="line"><span class="built_in">print</span>(sys.version_info)</span><br><span class="line"><span class="keyword">for</span> module <span class="keyword">in</span> mpl, np, pd, sklearn, tf, keras:</span><br><span class="line">    <span class="built_in">print</span>(module.__name__, module.__version__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># import PIL</span></span><br><span class="line"><span class="comment"># import IPython</span></span><br><span class="line"><span class="comment"># import kerastuner as kt</span></span><br></pre></td></tr></table></figure>

<h3 id="导入文件"><a href="#导入文件" class="headerlink" title="导入文件"></a>导入文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_dir = <span class="string">&quot;G:/dataset/rgbdsm/rgdsm/256_256/three grades-newGan/train&quot;</span></span><br><span class="line">test_dir = <span class="string">&quot;G:/dataset/rgbdsm/rgdsm/256_256/three grades-Gan/val&quot;</span></span><br><span class="line">val_dir = <span class="string">&quot;G:/dataset/rgbdsm/rgdsm/256_256/three grades-newGan/test&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(os.path.exists(train_dir))</span><br><span class="line"><span class="built_in">print</span>(os.path.exists(test_dir))</span><br><span class="line"><span class="built_in">print</span>(os.path.exists(val_dir))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(os.listdir(train_dir))</span><br><span class="line"><span class="built_in">print</span>(os.listdir(test_dir))</span><br><span class="line"><span class="built_in">print</span>(os.listdir(val_dir))</span><br></pre></td></tr></table></figure>

<h3 id="设置参数"><a href="#设置参数" class="headerlink" title="设置参数"></a>设置参数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">width = <span class="number">256</span></span><br><span class="line">height = <span class="number">256</span></span><br><span class="line">channels = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">epochs = <span class="number">40</span></span><br><span class="line">num_classes = <span class="number">3</span></span><br><span class="line">batch_size = <span class="number">32</span></span><br><span class="line"></span><br><span class="line">save_path = <span class="string">&#x27;./save_weights/3_&#123;epoch:02d&#125;-&#123;val_accuracy:.2f&#125;.h5&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="数据增强"><a href="#数据增强" class="headerlink" title="数据增强"></a>数据增强</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_datagen = keras.preprocessing.image.ImageDataGenerator(</span><br><span class="line"><span class="comment">#     rescale=1./255,</span></span><br><span class="line"><span class="comment">#     preprocessing_function=keras.applications.efficientnet.preprocess_input,</span></span><br><span class="line">    preprocessing_function=keras.applications.densenet.preprocess_input,</span><br><span class="line"><span class="comment">#     rotation_range=3,</span></span><br><span class="line"><span class="comment">#      width_shift_range=0.02,</span></span><br><span class="line"><span class="comment">#      height_shift_range=0.02,</span></span><br><span class="line"><span class="comment">#     zoom_range=0.1,</span></span><br><span class="line"><span class="comment">#     horizontal_flip=True,</span></span><br><span class="line"><span class="comment">#     vertical_flip=True,</span></span><br><span class="line"><span class="comment">#     brightness_range = (0.95, 1.05),</span></span><br><span class="line"><span class="comment">#     fill_mode=&#x27;nearest&#x27;,</span></span><br><span class="line"><span class="comment">#     validation_split=0.2</span></span><br><span class="line">)</span><br><span class="line">train_generator = train_datagen.flow_from_directory(train_dir,</span><br><span class="line">                                                    target_size=(height, width),</span><br><span class="line">                                                    batch_size= batch_size,</span><br><span class="line">                                                    seed=<span class="number">7</span>,</span><br><span class="line">                                                    shuffle=<span class="literal">True</span>,</span><br><span class="line">                                                    color_mode=<span class="string">&quot;rgb&quot;</span>,</span><br><span class="line"><span class="comment">#                                                     subset=&quot;training&quot;,</span></span><br><span class="line">                                                    class_mode=<span class="string">&quot;categorical&quot;</span>)</span><br><span class="line">val_datagen = keras.preprocessing.image.ImageDataGenerator(</span><br><span class="line"><span class="comment">#     rescale=1./255,</span></span><br><span class="line">    preprocessing_function=keras.applications.densenet.preprocess_input,</span><br><span class="line">)</span><br><span class="line">val_generator = val_datagen.flow_from_directory(val_dir,</span><br><span class="line">                                                  target_size=(height, width),</span><br><span class="line">                                                  batch_size=batch_size,</span><br><span class="line">                                                  seed=<span class="number">7</span>,</span><br><span class="line">                                                  shuffle=<span class="literal">False</span>,</span><br><span class="line">                                                  color_mode=<span class="string">&quot;rgb&quot;</span>,</span><br><span class="line"><span class="comment">#                                                   subset=&quot;validation&quot;,</span></span><br><span class="line">                                                  class_mode=<span class="string">&quot;categorical&quot;</span>)</span><br><span class="line">test_datagen = keras.preprocessing.image.ImageDataGenerator(</span><br><span class="line"><span class="comment">#     rescale=1./255,</span></span><br><span class="line">    preprocessing_function=keras.applications.densenet.preprocess_input,</span><br><span class="line">)</span><br><span class="line">test_generator = test_datagen.flow_from_directory(test_dir,</span><br><span class="line">                                                  target_size=(height, width),</span><br><span class="line">                                                  batch_size=batch_size,</span><br><span class="line">                                                  seed=<span class="number">7</span>,</span><br><span class="line">                                                  shuffle=<span class="literal">False</span>,</span><br><span class="line">                                                  color_mode=<span class="string">&quot;rgb&quot;</span>,</span><br><span class="line"><span class="comment">#                                                   subset=&quot;validation&quot;,</span></span><br><span class="line">                                                  class_mode=<span class="string">&quot;categorical&quot;</span>)</span><br><span class="line">train_num = train_generator.samples</span><br><span class="line">val_num = val_generator.samples</span><br><span class="line">test_num = test_generator.samples</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(train_num, val_num)</span><br><span class="line"><span class="built_in">print</span>(train_generator.class_indices)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    x, y = train_generator.<span class="built_in">next</span>()</span><br><span class="line">    <span class="built_in">print</span>(x.shape, y.shape)</span><br><span class="line"><span class="comment">#     print(y)</span></span><br></pre></td></tr></table></figure>

<h3 id="展示图片"><a href="#展示图片" class="headerlink" title="展示图片"></a>展示图片</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">class_names = [<span class="string">&#x27;0-30&#x27;</span>, <span class="string">&#x27;31-60&#x27;</span>, <span class="string">&#x27;61-100&#x27;</span>]</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">8</span>,<span class="number">8</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    plt.subplot(<span class="number">4</span>,<span class="number">4</span>,i+<span class="number">1</span>)</span><br><span class="line">    plt.xticks([])</span><br><span class="line">    plt.yticks([])</span><br><span class="line">    plt.grid(<span class="literal">False</span>)</span><br><span class="line">    plt.imshow(train_generator[i][<span class="number">0</span>][x]/<span class="number">255</span>, cmap=plt.cm.binary)</span><br><span class="line">    plt.xlabel(class_names[np.argmax(train_generator[i][<span class="number">1</span>][x])])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<h3 id="多分类平衡数据"><a href="#多分类平衡数据" class="headerlink" title="多分类平衡数据"></a>多分类平衡数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filenames = tf.io.gfile.glob(<span class="built_in">str</span>(train_dir + <span class="string">&#x27;/*/*&#x27;</span>))</span><br><span class="line"></span><br><span class="line">COUNT_1 = <span class="built_in">len</span>([filename <span class="keyword">for</span> filename <span class="keyword">in</span> filenames <span class="keyword">if</span> <span class="string">&quot;0-30&quot;</span> <span class="keyword">in</span> filename])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;0-30 images count in training set: &quot;</span> + <span class="built_in">str</span>(COUNT_1))</span><br><span class="line"></span><br><span class="line">COUNT_2 = <span class="built_in">len</span>([filename <span class="keyword">for</span> filename <span class="keyword">in</span> filenames <span class="keyword">if</span> <span class="string">&quot;31-60&quot;</span> <span class="keyword">in</span> filename])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;31-60 images count in training set: &quot;</span> + <span class="built_in">str</span>(COUNT_2))</span><br><span class="line"></span><br><span class="line">COUNT_3 = <span class="built_in">len</span>([filename <span class="keyword">for</span> filename <span class="keyword">in</span> filenames <span class="keyword">if</span> <span class="string">&quot;61-100&quot;</span> <span class="keyword">in</span> filename])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;61-100 images count in training set: &quot;</span> + <span class="built_in">str</span>(COUNT_3))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 平衡数据集</span></span><br><span class="line">weight_for_0 = (<span class="number">1</span> / COUNT_1)*(train_num)/<span class="number">3.0</span></span><br><span class="line">weight_for_1 = (<span class="number">1</span> / COUNT_2)*(train_num)/<span class="number">3.0</span></span><br><span class="line">weight_for_2 = (<span class="number">1</span> / COUNT_3)*(train_num)/<span class="number">3.0</span></span><br><span class="line"></span><br><span class="line">class_weight = &#123;<span class="number">0</span>: weight_for_0, <span class="number">1</span>: weight_for_1, <span class="number">2</span>: weight_for_2&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Weight for class 0: &#123;:.2f&#125;&#x27;</span>.<span class="built_in">format</span>(weight_for_0))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Weight for class 1: &#123;:.2f&#125;&#x27;</span>.<span class="built_in">format</span>(weight_for_1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Weight for class 2: &#123;:.2f&#125;&#x27;</span>.<span class="built_in">format</span>(weight_for_2))</span><br></pre></td></tr></table></figure>

<h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.callbacks <span class="keyword">import</span> ReduceLROnPlateau</span><br><span class="line"><span class="keyword">from</span> keras.callbacks <span class="keyword">import</span> ModelCheckpoint, LearningRateScheduler</span><br><span class="line"><span class="keyword">from</span> keras.callbacks <span class="keyword">import</span> TensorBoard</span><br><span class="line"></span><br><span class="line">lr_callback = ReduceLROnPlateau(monitor=<span class="string">&#x27;val_loss&#x27;</span>,</span><br><span class="line">                                patience=<span class="number">3</span>,</span><br><span class="line">                                verbose=<span class="number">1</span>,</span><br><span class="line">                                factor=<span class="number">0.2</span>,</span><br><span class="line">                                min_lr=<span class="number">0.000001</span>)</span><br><span class="line"><span class="comment"># 设置模型保存路径，且根据val_acc保存最优模型</span></span><br><span class="line">checkpoint = ModelCheckpoint(filepath=save_path,</span><br><span class="line">                                monitor=<span class="string">&#x27;val_accuracy&#x27;</span>,</span><br><span class="line">                                save_weights_only=<span class="literal">False</span>,</span><br><span class="line">                                save_best_only=<span class="literal">True</span>,</span><br><span class="line">                                mode=<span class="string">&#x27;auto&#x27;</span>,</span><br><span class="line">                                period=<span class="number">1</span>)</span><br><span class="line">tbCallBack = TensorBoard(log_dir=<span class="string">&#x27;g:/logs&#x27;</span>)</span><br><span class="line">callbacks = [lr_callback</span><br><span class="line">             checkpoint,</span><br><span class="line"><span class="comment">#              tbCallBack</span></span><br><span class="line">            ]</span><br></pre></td></tr></table></figure>

<h3 id="构建模型"><a href="#构建模型" class="headerlink" title="构建模型"></a>构建模型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># def create_model(hp):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_model</span>():</span></span><br><span class="line"></span><br><span class="line">    pretrained_model = tf.keras.applications.DenseNet201(weights=<span class="string">&#x27;imagenet&#x27;</span>,</span><br><span class="line">                                                            input_shape=[width, height, channels],</span><br><span class="line">                                                            include_top=<span class="literal">False</span>)</span><br><span class="line">    pretrained_model.trainable = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     hp_units = hp.Int(&#x27;units&#x27;, min_value = 32, max_value = 512, step = 32)</span></span><br><span class="line">    model = tf.keras.Sequential([</span><br><span class="line"><span class="comment">#         tf.keras.layers.InputLayer(input_shape=[width, height, channels]),</span></span><br><span class="line">        pretrained_model,</span><br><span class="line"><span class="comment">#         tf.keras.layers.Conv2D(filters=32, kernel_size=3, padding=&#x27;same&#x27;,</span></span><br><span class="line"><span class="comment">#                               activation=&#x27;relu&#x27;),</span></span><br><span class="line"><span class="comment">#         tf.keras.layers.Conv2D(filters=32, kernel_size=3, padding=&#x27;same&#x27;,</span></span><br><span class="line"><span class="comment">#                               activation=&#x27;relu&#x27;),</span></span><br><span class="line"><span class="comment">#         tf.keras.layers.MaxPool2D(pool_size=2),</span></span><br><span class="line"><span class="comment">#         tf.keras.layers.Conv2D(filters=64, kernel_size=3, padding=&#x27;same&#x27;,</span></span><br><span class="line"><span class="comment">#                               activation=&#x27;relu&#x27;),</span></span><br><span class="line"><span class="comment">#         tf.keras.layers.Conv2D(filters=64, kernel_size=3, padding=&#x27;same&#x27;,</span></span><br><span class="line"><span class="comment">#                               activation=&#x27;relu&#x27;),</span></span><br><span class="line"><span class="comment">#         tf.keras.layers.MaxPool2D(pool_size=2),</span></span><br><span class="line"><span class="comment">#         tf.keras.layers.Conv2D(filters=128, kernel_size=3, padding=&#x27;same&#x27;,</span></span><br><span class="line"><span class="comment">#                               activation=&#x27;relu&#x27;),</span></span><br><span class="line"><span class="comment">#         tf.keras.layers.Conv2D(filters=128, kernel_size=3, padding=&#x27;same&#x27;,</span></span><br><span class="line"><span class="comment">#                               activation=&#x27;relu&#x27;),</span></span><br><span class="line"><span class="comment">#         tf.keras.layers.MaxPool2D(pool_size=2),</span></span><br><span class="line"><span class="comment">#         tf.keras.layers.BatchNormalization(),</span></span><br><span class="line"><span class="comment">#         tf.keras.layers.Dropout(0.5),</span></span><br><span class="line">        tf.keras.layers.GlobalAveragePooling2D(),</span><br><span class="line">        tf.keras.layers.Dense(units = <span class="number">32</span>, activation = <span class="string">&#x27;relu&#x27;</span>),</span><br><span class="line"><span class="comment">#         tf.keras.layers.Dense(units = 256, activation = &#x27;relu&#x27;),</span></span><br><span class="line">        tf.keras.layers.Dropout(<span class="number">0.2</span>),</span><br><span class="line">        tf.keras.layers.Dense(num_classes, activation=<span class="string">&#x27;softmax&#x27;</span>,</span><br><span class="line"><span class="comment">#                               kernel_regularizer=&#x27;l2&#x27;</span></span><br><span class="line">                             )</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line"><span class="comment">#     hp_learning_rate = hp.Choice(&#x27;learning_rate&#x27;, values = [1e-2, 1e-3, 1e-4])</span></span><br><span class="line">    model.<span class="built_in">compile</span>(</span><br><span class="line">        optimizer = tf.keras.optimizers.Adam(learning_rate=<span class="number">0.0001</span>),</span><br><span class="line"><span class="comment">#         optimizer=tf.keras.optimizers.Adam(lr=lr_schedule(0)),</span></span><br><span class="line"><span class="comment">#         optimizer=&#x27;sgd&#x27;,</span></span><br><span class="line"><span class="comment">#         optimizer=&#x27;adam&#x27;,</span></span><br><span class="line">        loss=<span class="string">&#x27;categorical_crossentropy&#x27;</span>,</span><br><span class="line">        metrics=[<span class="string">&#x27;accuracy&#x27;</span>]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> model</span><br></pre></td></tr></table></figure>

<h3 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model = create_model()</span><br><span class="line">model.summary()</span><br><span class="line">history1 = model.fit(train_generator,</span><br><span class="line">                     steps_per_epoch=train_num // batch_size,</span><br><span class="line">                     validation_data=val_generator,</span><br><span class="line">                     validation_steps=val_num // batch_size,</span><br><span class="line">                     epochs=epochs,</span><br><span class="line">                     verbose=<span class="number">1</span>,</span><br><span class="line"><span class="comment">#                      class_weight=class_weight,</span></span><br><span class="line">                     callbacks=callbacks</span><br><span class="line">                    )</span><br><span class="line"><span class="comment"># 终端 tensorboard --logdir=g:/logs</span></span><br></pre></td></tr></table></figure>

<h3 id="绘制曲线"><a href="#绘制曲线" class="headerlink" title="绘制曲线"></a>绘制曲线</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">display_training_curves</span>(<span class="params">training, validation, title, subplot</span>):</span></span><br><span class="line">    <span class="keyword">if</span> subplot % <span class="number">10</span> == <span class="number">1</span>:  <span class="comment"># set up the subplots on the first call</span></span><br><span class="line">        plt.subplots(figsize=(<span class="number">10</span>, <span class="number">10</span>), facecolor=<span class="string">&#x27;#F0F0F0&#x27;</span>)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">    ax = plt.subplot(subplot)</span><br><span class="line">    ax.set_facecolor(<span class="string">&#x27;#F8F8F8&#x27;</span>)</span><br><span class="line">    ax.plot(training)</span><br><span class="line">    ax.plot(validation)</span><br><span class="line">    ax.set_title(<span class="string">&#x27;model &#x27;</span> + title)</span><br><span class="line">    ax.set_ylabel(title)</span><br><span class="line">    <span class="comment"># ax.set_ylim(0.28,1.05)</span></span><br><span class="line">    ax.set_xlabel(<span class="string">&#x27;epoch&#x27;</span>)</span><br><span class="line">    ax.legend([<span class="string">&#x27;train&#x27;</span>, <span class="string">&#x27;valid.&#x27;</span>])</span><br><span class="line"></span><br><span class="line">final_accuracy = history1.history[<span class="string">&quot;val_accuracy&quot;</span>][-<span class="number">5</span>:]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;FINAL ACCURACY MEAN-5: &quot;</span>, np.mean(final_accuracy))</span><br><span class="line">display_training_curves(history1.history[<span class="string">&#x27;accuracy&#x27;</span>][<span class="number">1</span>:], history1.history[<span class="string">&#x27;val_accuracy&#x27;</span>][<span class="number">1</span>:], <span class="string">&#x27;accuracy&#x27;</span>, <span class="number">211</span>)</span><br><span class="line">display_training_curves(history1.history[<span class="string">&#x27;loss&#x27;</span>][<span class="number">1</span>:], history1.history[<span class="string">&#x27;val_loss&#x27;</span>][<span class="number">1</span>:], <span class="string">&#x27;loss&#x27;</span>, <span class="number">212</span>)</span><br></pre></td></tr></table></figure>

<h3 id="评估模型"><a href="#评估模型" class="headerlink" title="评估模型"></a>评估模型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># file_path = &#x27;./save_weights/3_17-0.84.h5&#x27;</span></span><br><span class="line"><span class="comment"># model.load_weights(file_path)</span></span><br><span class="line"></span><br><span class="line">val_loss, val_acc = model.evaluate(test_generator)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nTest accuracy:&#x27;</span>, val_acc)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nTest loss:&#x27;</span>, val_loss)</span><br></pre></td></tr></table></figure>

<h3 id="绘制混淆矩阵"><a href="#绘制混淆矩阵" class="headerlink" title="绘制混淆矩阵"></a>绘制混淆矩阵</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> confusion_matrix</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_confusion_matrix</span>(<span class="params">cm, target_names,title=<span class="string">&#x27;Confusion matrix&#x27;</span>,cmap=<span class="literal">None</span>,normalize=<span class="literal">False</span></span>):</span></span><br><span class="line">    accuracy = np.trace(cm) / <span class="built_in">float</span>(np.<span class="built_in">sum</span>(cm)) <span class="comment">#计算准确率</span></span><br><span class="line">    misclass = <span class="number">1</span> - accuracy <span class="comment">#计算错误率</span></span><br><span class="line">    <span class="keyword">if</span> cmap <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        cmap = plt.get_cmap(<span class="string">&#x27;Blues&#x27;</span>) <span class="comment">#颜色设置成蓝色</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">6</span>, <span class="number">4</span>)) <span class="comment">#设置窗口尺寸</span></span><br><span class="line">    plt.imshow(cm, interpolation=<span class="string">&#x27;nearest&#x27;</span>, cmap=cmap) <span class="comment">#显示图片</span></span><br><span class="line">    plt.title(title) <span class="comment">#显示标题</span></span><br><span class="line">    plt.colorbar() <span class="comment">#绘制颜色条</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> target_names <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        tick_marks = np.arange(<span class="built_in">len</span>(target_names))</span><br><span class="line">        plt.xticks(tick_marks, target_names, rotation=<span class="number">45</span>) <span class="comment">#x坐标标签旋转45度</span></span><br><span class="line">        plt.yticks(tick_marks, target_names) <span class="comment">#y坐标</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> normalize:</span><br><span class="line">        cm = cm.astype(<span class="string">&#x27;float32&#x27;</span>) / cm.<span class="built_in">sum</span>(axis=<span class="number">1</span>)</span><br><span class="line">        cm = np.<span class="built_in">round</span>(cm,<span class="number">2</span>) <span class="comment">#对数字保留两位小数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    thresh = cm.<span class="built_in">max</span>() / <span class="number">1.5</span> <span class="keyword">if</span> normalize <span class="keyword">else</span> cm.<span class="built_in">max</span>() / <span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> i, j <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(cm.shape[<span class="number">0</span>]), <span class="built_in">range</span>(cm.shape[<span class="number">1</span>])): <span class="comment">#将cm.shape[0]、cm.shape[1]中的元素组成元组，遍历元组中每一个数字</span></span><br><span class="line">        <span class="keyword">if</span> normalize: <span class="comment">#标准化</span></span><br><span class="line">            plt.text(j, i, <span class="string">&quot;&#123;:0.2f&#125;&quot;</span>.<span class="built_in">format</span>(cm[i, j]), <span class="comment">#保留两位小数</span></span><br><span class="line">                     horizontalalignment=<span class="string">&quot;center&quot;</span>,  <span class="comment">#数字在方框中间</span></span><br><span class="line">                     color=<span class="string">&quot;white&quot;</span> <span class="keyword">if</span> cm[i, j] &gt; thresh <span class="keyword">else</span> <span class="string">&quot;black&quot;</span>)  <span class="comment">#设置字体颜色</span></span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment">#非标准化</span></span><br><span class="line">            plt.text(j, i, <span class="string">&quot;&#123;:,&#125;&quot;</span>.<span class="built_in">format</span>(cm[i, j]),</span><br><span class="line">                     horizontalalignment=<span class="string">&quot;center&quot;</span>,  <span class="comment">#数字在方框中间</span></span><br><span class="line">                     color=<span class="string">&quot;white&quot;</span> <span class="keyword">if</span> cm[i, j] &gt; thresh <span class="keyword">else</span> <span class="string">&quot;black&quot;</span>) <span class="comment">#设置字体颜色</span></span><br><span class="line"></span><br><span class="line">    plt.tight_layout() <span class="comment">#自动调整子图参数,使之填充整个图像区域</span></span><br><span class="line">    plt.ylabel(<span class="string">&#x27;True label&#x27;</span>) <span class="comment">#y方向上的标签</span></span><br><span class="line">    plt.xlabel(<span class="string">&quot;Predicted label\naccuracy=&#123;:0.4f&#125;\n misclass=&#123;:0.4f&#125;&quot;</span>.<span class="built_in">format</span>(accuracy, misclass)) <span class="comment">#x方向上的标签</span></span><br><span class="line">    plt.show() <span class="comment">#显示图片</span></span><br><span class="line"></span><br><span class="line">labels = [<span class="string">&#x27;0-30&#x27;</span>, <span class="string">&#x27;31-60&#x27;</span>, <span class="string">&#x27;60-100&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测验证集数据整体准确率</span></span><br><span class="line">Y_pred = model.predict(test_generator, test_num // batch_size + <span class="number">1</span>)</span><br><span class="line"><span class="comment"># 将预测的结果转化为one hit向量</span></span><br><span class="line">Y_pred_classes = np.argmax(Y_pred, axis = <span class="number">1</span>)</span><br><span class="line"><span class="comment"># 计算混淆矩阵</span></span><br><span class="line">confusion_mtx = confusion_matrix(y_true = test_generator.classes,y_pred = Y_pred_classes)</span><br><span class="line"><span class="comment"># 绘制混淆矩阵</span></span><br><span class="line">plot_confusion_matrix(confusion_mtx, normalize=<span class="literal">True</span>, target_names=labels)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>AI</category>
      </categories>
      <tags>
        <tag>share</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/04/12/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo s -g</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo d -g</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>methods</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo使用Next主题</title>
    <url>/2021/04/14/Use%20Hexo%20With%20Next%20Share/</url>
    <content><![CDATA[<p>这是搭建Hexo和使用Next主题所参考的链接，有必要可参考</p>
<span id="more"></span>

<h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><p><a href="https://hexo.io/zh-cn/docs/">Hexo 简介</a></p>
<h3 id="Next主题"><a href="#Next主题" class="headerlink" title="Next主题"></a>Next主题</h3><p><a href="http://theme-next.iissnan.com/getting-started.html">Next 使用文档</a></p>
<p><a href="https://github.com/next-theme/hexo-theme-next">Next 进阶操作</a></p>
<p><a href="https://theme-next.js.org/docs/third-party-services/">Next 进阶操作(推荐)</a></p>
<h3 id="LeanCloud"><a href="#LeanCloud" class="headerlink" title="LeanCloud"></a>LeanCloud</h3><p><a href="https://console.leancloud.cn/apps">LeanCloud 官网</a></p>
<p><a href="https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md">修复 LeanCloud 统计插件安全漏洞</a></p>
<h3 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h3><p><a href="https://www.zhihu.com/question/267598518">Hexo（NexT 主题）评论系统哪个好？</a></p>
<p><a href="https://valine.js.org/#/">Valine 推荐</a></p>
<h3 id="Mermaid"><a href="#Mermaid" class="headerlink" title="Mermaid"></a>Mermaid</h3><p>Mermaid是一个基于Javascript的图表绘制工具，它使用Markdown启发的文本定义以及渲染器来创建和修改复杂的图表。Mermaid的主要目的是帮助文档赶上开发。</p>
<p><a href="https://github.com/mermaid-js/mermaid">Mermaid github</a></p>
<p><a href="https://theme-next.js.org/docs/tag-plugins/mermaid.html">Mermaid 使用文档</a></p>
<p><a href="https://mermaid-js.github.io/mermaid-live-editor/#/edit/eyJjb2RlIjoiZ3JhcGggVERcbiAgICBBW0hhcmRdIC0tPnxUZXh0fCBCKFJvdW5kKVxuICAgIEIgLS0-IEN7RGVjaXNpb259XG4gICAgQyAtLT58T25lfCBEW1Jlc3VsdCAxXVxuICAgIEMgLS0-fFR3b3wgRVtSZXN1bHQgMl0iLCJtZXJtYWlkIjp7InRoZW1lIjoiZGVmYXVsdCJ9LCJ1cGRhdGVFZGl0b3IiOmZhbHNlfQ">Mermaid 在线编辑</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>share</tag>
      </tags>
  </entry>
  <entry>
    <title>plan</title>
    <url>/2021/04/13/plan/</url>
    <content><![CDATA[<p>Welcome to my site! This is my plan. I write it to improve my efficiency.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="pie"><a href="#pie" class="headerlink" title="pie"></a>pie</h3><pre class="mermaid">
pie
&quot;Dogs&quot; : 386
&quot;Cats&quot; : 85
&quot;Rats&quot; : 15
</pre>

<pre class="mermaid">
graph TD
A[Hard] --&gt;|Text| B(Round)
B --&gt; C{Decision}
C --&gt;|One| D[Result 1]
C --&gt;|Two| E[Result 2]
</pre>

<p>我来解释下为啥不能用吧,原来这mermaid东西需要在下面加一条代码才可以运行，好坑爹呀</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Hello World&#x27;</span>)</span><br></pre></td></tr></table></figure>

<div class="tabs" id="sixth-unique-name"><ul class="nav-tabs"><li class="tab active"><a href="#sixth-unique-name-1"><i class="fa fa-text-width"></i>Solution 1</a></li><li class="tab"><a href="#sixth-unique-name-2"><i class="fa fa-font"></i>Solution 2</a></li><li class="tab"><a href="#sixth-unique-name-3"><i class="fa fa-bold"></i>Solution 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="sixth-unique-name-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-pane" id="sixth-unique-name-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-pane" id="sixth-unique-name-3"><p><strong>This is Tab 3.</strong></p></div></div></div>


]]></content>
      <tags>
        <tag>plan</tag>
      </tags>
  </entry>
  <entry>
    <title>数据增强 代码</title>
    <url>/2021/04/21/Data-Augmention/</url>
    <content><![CDATA[<p>打算做一套数据增强都适用的代码，放在博客方便copy</p>
<span id="more"></span>

<h3 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> sklearn</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tensorflow <span class="keyword">import</span> keras</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(tf.__version__)</span><br><span class="line"><span class="built_in">print</span>(sys.version_info)</span><br><span class="line"><span class="keyword">for</span> module <span class="keyword">in</span> mpl, np, pd, sklearn, tf, keras:</span><br><span class="line">    <span class="built_in">print</span>(module.__name__, module.__version__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># import PIL</span></span><br><span class="line"><span class="comment"># import IPython</span></span><br><span class="line"><span class="comment"># import kerastuner as kt</span></span><br></pre></td></tr></table></figure>

<h3 id="导入文件"><a href="#导入文件" class="headerlink" title="导入文件"></a>导入文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os, random, shutil</span><br><span class="line"></span><br><span class="line"><span class="comment">#将 dir 目录下 train 中的各个文件夹中的文件随机移动到 dir 创建的 val 同名目录</span></span><br><span class="line"><span class="built_in">dir</span> = <span class="string">r&#x27;G:/dataset/rgbdsm/rgdsm/256_256/three grades-newGan/train/61-100&#x27;</span></span><br><span class="line">rate = <span class="number">0.2</span> <span class="comment">#选取的比例</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    trainpath = <span class="built_in">dir</span> + <span class="string">&quot;\\train&quot;</span></span><br><span class="line"><span class="comment">#     print(trainpath)</span></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(trainpath):</span><br><span class="line"><span class="comment">#          print(file)</span></span><br><span class="line">        filepath = os.path.join(trainpath,file)  <span class="comment">#每个子文件夹</span></span><br><span class="line"><span class="comment">#         print(&quot;filepath = %s &quot; %  filepath)</span></span><br><span class="line"></span><br><span class="line">        files = os.listdir(filepath)         <span class="comment">#每个子文件夹的所有文件列表</span></span><br><span class="line">        filelength = <span class="built_in">len</span>(files)</span><br><span class="line"><span class="comment">#         print(&quot;filelength = %d &quot; % filelength)</span></span><br><span class="line"></span><br><span class="line">        picklength = <span class="built_in">int</span>(filelength * rate)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;picklength = %d &quot;</span> % picklength)</span><br><span class="line">        sample = random.sample(files, picklength) <span class="comment">#从每个子文件夹中随机选取</span></span><br><span class="line"><span class="comment">#         print(&quot;len-sample = %d &quot; % len(sample))</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">list</span> = filepath.split(<span class="string">&quot;\\&quot;</span>)</span><br><span class="line">        testpath =  <span class="built_in">dir</span> + <span class="string">&quot;\\test\\&quot;</span> + <span class="built_in">str</span>(<span class="built_in">list</span>[<span class="built_in">len</span>(<span class="built_in">list</span>)-<span class="number">1</span>])</span><br><span class="line"><span class="comment">#         print(&quot;valpath = %s&quot;%valpath)</span></span><br><span class="line">        isExists = os.path.exists(testpath)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isExists:</span><br><span class="line">            os.makedirs(testpath)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> sample:</span><br><span class="line"><span class="comment">#             print(&quot;name = %s&quot;%name)</span></span><br><span class="line">            shutil.move(os.path.join(filepath, name), os.path.join(testpath, name))</span><br></pre></td></tr></table></figure>
<h3 id="导入文件-1"><a href="#导入文件-1" class="headerlink" title="导入文件"></a>导入文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 每个日期的图片都要分20%给验证集 2021-4-20</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 把每个分组的不同日期的图片分别归类到每个分组</span></span><br><span class="line"><span class="keyword">import</span> os, random, shutil</span><br><span class="line"></span><br><span class="line"><span class="built_in">dir</span> = <span class="string">r&#x27;G:/dataset/rgbdsm/rgdsm/256_256/three grades-class&#x27;</span></span><br><span class="line"></span><br><span class="line">datename = [<span class="string">&#x27;20160607&#x27;</span>, <span class="string">&#x27;170707&#x27;</span>, <span class="string">&#x27;2018.05.14&#x27;</span>, <span class="string">&#x27;2018.05.23&#x27;</span>, <span class="string">&#x27;2018.05.29&#x27;</span>, <span class="string">&#x27;2018.06.08&#x27;</span>, <span class="string">&#x27;2018.06.12&#x27;</span>,</span><br><span class="line">       <span class="string">&#x27;180625&#x27;</span>, <span class="string">&#x27;200528&#x27;</span>, <span class="string">&#x27;200603&#x27;</span>, <span class="string">&#x27;200612&#x27;</span>]</span><br><span class="line"></span><br><span class="line">trainpath = <span class="built_in">dir</span> + <span class="string">&quot;\\train&quot;</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(trainpath):</span><br><span class="line">    filepath = os.path.join(trainpath,file)  <span class="comment">#每个子文件夹</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;filepath = %s &quot;</span> %  filepath)</span><br><span class="line"></span><br><span class="line">    files = os.listdir(filepath)         <span class="comment">#每个子文件夹的所有文件列表</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> date <span class="keyword">in</span> datename:</span><br><span class="line">        testpath =  filepath + <span class="string">&quot;\\&quot;</span> + date</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;testpath = %s &quot;</span> %  testpath)</span><br><span class="line">        isExists = os.path.exists(testpath)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isExists:</span><br><span class="line">            os.makedirs(testpath)</span><br><span class="line">    <span class="comment"># 输出所有文件和文件夹</span></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">        <span class="keyword">if</span> os.path.splitext(file)[<span class="number">1</span>] == <span class="string">&#x27;.jpg&#x27;</span>:</span><br><span class="line">            split=file[<span class="number">0</span>:<span class="number">10</span>]        <span class="comment">#截取文件名前十个字符</span></span><br><span class="line">            <span class="keyword">for</span> date <span class="keyword">in</span> datename:</span><br><span class="line">                <span class="keyword">if</span> date <span class="keyword">in</span> split:</span><br><span class="line">                    shutil.move(os.path.join(filepath, file), os.path.join(filepath, date))</span><br><span class="line"><span class="comment">#                     print(date)</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 2. 把训练集每个分组的图片分20%到验证集test文件夹下</span></span><br><span class="line"><span class="keyword">import</span> os, random, shutil</span><br><span class="line">rate = <span class="number">0.2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> classname <span class="keyword">in</span> os.listdir(trainpath):</span><br><span class="line">    filepath = os.path.join(trainpath, classname)</span><br><span class="line">    <span class="built_in">print</span>(filepath)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;filepath = %s &quot;</span> %  filepath)</span><br><span class="line">    <span class="keyword">for</span> datename <span class="keyword">in</span> os.listdir(filepath):</span><br><span class="line">        datepath = os.path.join(filepath,datename)  <span class="comment">#每个子文件夹</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;datepath = %s &quot;</span> %  datepath)</span><br><span class="line"></span><br><span class="line">        files = os.listdir(datepath)         <span class="comment">#每个子文件夹的所有文件列表</span></span><br><span class="line">        filelength = <span class="built_in">len</span>(files)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;filelength = %d &quot;</span> % filelength)</span><br><span class="line"></span><br><span class="line">        picklength = <span class="built_in">int</span>(filelength * rate)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;picklength = %d &quot;</span> % picklength)</span><br><span class="line">        sample = random.sample(files, picklength) <span class="comment">#从每个子文件夹中随机选取</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;len-sample = %d &quot;</span> % <span class="built_in">len</span>(sample))</span><br><span class="line"></span><br><span class="line">        <span class="built_in">list</span> = filepath.split(<span class="string">&quot;\\&quot;</span>)</span><br><span class="line">        testpath =  <span class="built_in">dir</span> + <span class="string">&quot;\\test\\&quot;</span> + <span class="built_in">str</span>(<span class="built_in">list</span>[<span class="built_in">len</span>(<span class="built_in">list</span>)-<span class="number">1</span>])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;testpath = %s&quot;</span>%testpath)</span><br><span class="line">        isExists = os.path.exists(testpath)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isExists:</span><br><span class="line">            os.makedirs(testpath)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> sample:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;originpath = %s&quot;</span>%os.path.join(datepath, name))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;afterpath = %s&quot;</span>%os.path.join(testpath, name))</span><br><span class="line">            shutil.move(os.path.join(datepath, name), os.path.join(testpath, name))</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 3. 把训练集每个分组的图片提取出来，并删除文件夹</span></span><br><span class="line"><span class="keyword">for</span> classname <span class="keyword">in</span> os.listdir(trainpath):</span><br><span class="line">    filepath = os.path.join(trainpath, classname)</span><br><span class="line">    <span class="built_in">print</span>(filepath)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;filepath = %s &quot;</span> %  filepath)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(os.path.isdir(filepath))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> datename <span class="keyword">in</span> os.listdir(filepath):</span><br><span class="line">        datepath = os.path.join(filepath,datename)  <span class="comment">#每个子文件夹</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;datepath = %s &quot;</span> %  datepath)</span><br><span class="line"></span><br><span class="line">        files = os.listdir(datepath)         <span class="comment">#每个子文件夹的所有文件列表</span></span><br><span class="line">        filelength = <span class="built_in">len</span>(files)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;filelength = %d &quot;</span> % filelength)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> files:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;originpath = %s&quot;</span>%os.path.join(datepath, name))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;afterpath = %s&quot;</span>%os.path.join(filepath, name))</span><br><span class="line">            shutil.move(os.path.join(datepath, name), os.path.join(filepath, name))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(datepath):</span><br><span class="line">            os.rmdir(datepath)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>AI</category>
      </categories>
      <tags>
        <tag>share</tag>
      </tags>
  </entry>
</search>
